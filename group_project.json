{
    "Week 6: Group Project": "All group members MUST contribute. Break up the development work for this assignment so that each group member is assigned a task.\n\nPlease perform the following tasks:\n\n1. HTML (Page Structure): Web Storefront - Shopper Management (handles the new/update shopper details form)\n2. CSS (Page Style and Cosmetics): Web Storefront - Shopper Management\n3. Bootstrap (Professional Look): Web Storefront - Shopper Management\n4. JavaScript (Page Behaviors and Field Integrity Checks): Shopper Management Page\n5. JSON: Shopper Document Collection (containing the details from the new/update shopper details form)\n\nShopper details should include:\n- Email address (required)\n- Name (required)\n- Contact phone number (optional)\n- Age (required)\n- Address (required)",
    
    "Week 5: Lab Assignment": "Complete the sortEvens() function, which has a single numArray parameter containing an array of integers. The function should create a new array containing only the even integers in numArray. Then the function should sort the array of even integers and return the sorted array.\n\nEx: The call sortEvens([4, 2, 9, 1, 8]) should return the array [2, 4, 8].\n\nsortEvens() should return an empty array if no even numbers exist in the numArray parameter.\n\nEx: The call sortEvens([3, 1, 95]) should return [].\n\nHint: Use the array method push() to add even numbers to a new array. Supply the array method sort() a comparison function for sorting numbers correctly.\n\nindex.js is calling sortEvens() for testing purposes. You can call sortEvens() with other arguments to further test your function.",

    "Week 4: Class Activity": "Overview:\n\nThe provided Mediterranean Vacations webpage needs Bootstrap to make the webpage responsive.\n\nStep 1: Download Bootstrap (1 point)\n\nAdd <link> and <script> tags to index.html so the webpage downloads the necessary Bootstrap-related files:\n\n1.https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\n\nintegrity='sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN'\n\ncrossorigin='anonymous'\n\n2.https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\n\nintegrity='sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL'\n\ncrossorigin='anonymous'\n\nStep 2: Add nav container (2 points)\n\nAdd the necessary Bootstrap classes to <nav> and the nav's child elements so the nav acts as a fluid container with one row. Each <li> should use the col-md class to form one equally-spaced row when the viewport is at least 768px wide.\n\nDo not add or remove any HTML elements.\n\nThe screenshot below the navigation links on a single row when the viewport is at least 768px wide.\n\nStep 3: Add benefits container (2 points)\n\nAdd the necessary Bootstrap classes to the <div> with ID benefits and the div's child elements so the div acts as a responsive fixed-width container that changes at various breakpoints. The inner divs should use the col-sm class to form one equally-spaced row when the viewport is at least 576px wide.\n\nDo not add or remove any HTML elements.\n\nThe screenshot below shows the three benefits on a single row when the viewport is at least 576px wide.\n\nStep 4: Add section div containers (2 points)\n\nEach <section> has a child <div> that has a fluid container with one row. Use the col-lg class to create two equally-spaced columns so the photo is on the left and the text description is on the right when the viewport is at least 992px wide.\n\nDo not add or remove any HTML elements.\n\nThe screenshot below shows the vacation photos with descriptions on the right when the viewport is at least 992px wide.\n\nStep 5: Add responsive images (1 point)\n\nAdd the rounded class to the photos to give the photos rounded corners.\n\nAdd the img-fluid class to the photos so the photos stretch to fill the column when the viewport is at least 992px wide.\n\nThe screenshot below shows the rounded corners. The images grow in size as the viewport is made wider.\n\nStep 6: Show an Alert (2 points)\n\nA Bootstrap Modal with ID contact-modal is defined in the section with ID contact. Clicking the 'Send a message' button displays the Modal, and clicking either of the Modal's buttons closes the Modal.\n\nAdd an Alert with ID conf-alert immediately below the 'Send a message' button. The Alert should use the following classes: alert, alert-success, and collapse. The Alert should read: 'Thank you! We will contact you soon!'\n\nThe JavaScript code in script.js hides the 'Send a message' button and shows the Alert when the Modal's 'Send message' button is clicked. No JavaScript code modifications are required.\n\nThe screenshot below shows the Modal that is displayed when clicking the 'Send a message' button. After the user types their information and clicks 'Send message', the Modal disappears, and the Alert should appear in place of the 'Send a message' button.",

    "Week 3: Class Activity": "Modify the DOM nodes.\n\nAn HTML element using the hidden attribute is not displayed by the web browser.\n\nAdd JavaScript in the changePage() function so that clicking on the Use Current Astronomy button does the following:\n\n1.Uses removeAttribute() to remove the hidden attribute from the paragraph with the id p2, causing the paragraph to become visible.\n\n2.Uses the textContent property of the span with id lastPlanet to change the name of the farthest planet to 'Neptune'.\n\n3.Uses the innerHTML property of the paragraph with id p4 to add a link: <a href='https://en.wikipedia.org/wiki/Pluto'>Source</a>\n\nUse an appropriate DOM search method like document.getElementById() to access the DOM nodes.",

    "Week 2: Class Activity": "Add the necessary CSS so the provided HTML produces the following webpage:\n\nComparison of Dealer Incentives and Loan Offers\n\nPurchase Offer 1: \n\nPurchase price: $33,500\n\nCash incentive/rebate: $0\n\nLoan term (months): $48\n\nAnnual percentage rate (APR): $3.2\n\nMonthly payment: $725.33\n\nTotal cost: $34.815.62\n\nPurchase Offer 2:\n\nPurchase price: $33,500\n\nCash incentive/rebate: $500\n\nLoan term (months): $48\n\nAnnual percentage rate (APR): $4.1\n\nMonthly payment: $746.59\n\nTotal cost: $35,836.15\n\nThe following style rules should be added to styles.css:\n\nThe default fonts (in order of priority) should be Roboto, Helvetica, and sans-serif.\n\nThe heading 'Comparison of Dealer Incentives and Loan Offers' should be 16px font using color #444444.\n\nDefine a container class with centered text, a 5 pixel margin, and a font size of 13px.\n\nEach offer is defined in a <section> element with the class offer. Define the offer class so that:\n\nEach offer is displayed inline-block, with a fixed width of 400 pixels, a 4 pixel margin, and centered text\n\nEach offer has a 1 pixel solid border using color #cccccc\n\nThe offer title is defined in an <h2> element with offer-title class. Define the offer-title class so that:\n\nThe title uses 14px bold font with color #ffffff\n\nThe title's background is colored #00b3b3\n\nThe title has no margin and 15 pixels of padding\n\nThe offer contents are defined in a <div> element with class offer-contents. Define the offer-contents class so that:\n\nEach offer contents div has 20 pixels of padding and background colored #fafafa\n\nDefine CSS rules such that all tables have the following styling:\n\nThe table should have a width of 100%, background colored #ffffff, and no border spacing\n\nHeader cells should use a 12px bold font with color #777777\n\nData cells should use a font lighter than normal weight with color #444444\n\nHeader cells should have 10 pixels of padding and no margin\n\nData cells should have 10 pixels of padding on the left and right, 20 pixels of padding on top and bottom, and no margin\n\nBoth header cells and data cells should left align text\n\nBoth header cells and data cells should have a solid bottom border of 1 pixel using color #f1f1f1\n\nDefine a final-value class that defines a bold font weight with color #2222ff.",

    "Week 1: Lab Activity": "Create a webpage about your hometown like the example: Sometown, USA\n\nLocation\n\nSometown is located 50 miles west of another town in Somestate.\n\nAbout\n\nWeather\n\nIt's warm all year.\n\nPopulation\n\nAround 25,000 people call Sometown home.\n\nSports\n\nBasketball and football are popular sports in Sometown.\n\nThings To Do\n\n· Fishing\n\n· Hiking\n\n· See the sites.\n\nYour webpage must meet the following requirements:\n\n 1. Specifies an appropriate webpage title with a <title> element.\n\n 2. Uses <h1> elements for the hometown name followed by three sections, each using <section> elements.\n\n 3. First section should use an <h2> heading entitled 'Location' and a single <p> element that briefly describes the town's location.\n\n 4. Second section should use an <h2> heading entitled 'About' and at least three subsections that each use <section> and <h3> elements. Each subsection should have a single <p> element describing something about your hometown.\n\n 5. Third section should use an <h2> heading entitled 'Things To Do' and an unordered list of at least three interesting things to do in your hometown",
 
    "Week 7: Group Work Project": "Please perform the following tasks as your group:\n\n1. HTML (Page Structure): Web Storefront - Product Management (handles the new/update product details form)\n2. CSS (Page Style and Cosmetics): Web Storefront - Product Management Web Page\n3. Bootstrap (Professional Look): Web Storefront - Product Management Web Page\n4. JavaScript (Page Behaviors and Field Integrity Checks): Product Management Web Page\n5. JSON: Product Document Collection for the Product Management Page\n6. jQuery: Search and update the JSON product document\n\nProduct details should include:\n- Product Id (required)\n- Product Description (required)\n- Product Category (required)\n- Product Unit of Measure (required)\n- Product Price (required)\n- Product Weight (optional)",
  
    "Week 8: Group Work Project Alpha Web Storefront": "All group members MUST contribute. If your name does not appear on the cover page or in the document section, you will receive a zero for this assignment. Break up the development work so that each member is assigned a task. Each section of the PDF document must show the team member author. Include all coding and screenshots of the rendered web pages.\n\nPlease perform the following tasks:\n\n1. HTML (Page Structure): Web Storefront - Shopping Cart (handles searching, adding, and removing products)\n2. CSS (Page Style and Cosmetics): Shopping Cart Web Page\n3. Bootstrap (Professional look) Web Storefront: Shopping Cart Web Page\n4. JavaScript (page behaviors and field integrity checks) Web Storefront: Shopping Cart Web Page\n5. JSON Product Document (containing the details from the new/update product details form): the Shopping Cart Web Page\n6. jQuery (Search the product document collection for items to add to the shopping cart) Web Storefront: Shopping Cart Web Page\n7. AJAX (transport the JSON document collection to a restful service API service) Web Storefront: Shopping Cart Web Page",
  
    "Week 9: Group Work Project Alpha Web Storefront": "All group members MUST contribute. If your name does not appear on the cover page or in the document section, you will receive a zero for this assignment. Break up the development work so that each member is assigned a task. Each section of the PDF document must show the team member author. Include all coding and screenshots of the rendered web pages.\n\nPlease perform the following tasks:\n\n1. HTML (Page Structure) Web Storefront: Shipping Selection (will handle the order shipping details selection - shipping destination, shipping carrier, and shipping method) Web Page\n2. CSS (Page Style and Cosmetics) Web Storefront: Shipping Selection Web Page\n3. Bootstrap (Professional look) Web Storefront: Shipping Selection Web Page\n4. JavaScript (page behaviors and field integrity checks on the form) Web Storefront: Shipping Selection Web Page\n5. JSON Product Document (containing the details from the shipping selection form): the Shopping Cart Web Page\n6. jQuery (Search the product document collection for items to add to the shopping cart) Web Storefront: Shopping Cart Web Page\n7. AJAX (transport the JSON document collection to a restful service API service) Web Storefront: Shopping Cart Web Page\n8. AngularJS (call the restful services to handle send the JSON document collections: shopper, products, shopping cart).Shipping details: shipping destination address, shipping carrier, and shipping method",
    
    "Week 10: Group Work Project Alpha Web Storefront": "Billing Details and Handle Returns Web Pages:\n\nAll group members MUST contribute. If your name does not appear on the cover page or in the document section then you have not contributed and will receive a zero for this assignment. Break up the development work for this assignment so that each group member is assigned a task. Each section of the PDF document will show the team member author who contributed to the following tasks. Include all the coding effort and screen shots of web page rendering in the Web browser.\n\n1.HTML (Page Structure) Web Storefront: Billing Details and Handle Returns (will handle the billing details and searching and adding products to handle returns) Web Pages\n\n2.CSS (Page Style and Cosmetics) Web Storefront: Billing Details and Handle Returns Web Pages\n\n3.Bootstrap (Professional look) Web Storefront: Billing Details and Handle Returns Web Pages\n\n4.JavaScript (page behaviors and field integrity checks) Web Storefront: Billing Details and Handle Returns Web Pages\n\n5.JSON Product Document (the collection will contain the shopper's/customer's products to be returned): the Billing Details and Handle Returns Web Pages\n\n6.jQuery (Search the product document collection for items to add to the shopping cart) Web Storefront: Billing Details and Handle Returns Web Pages\n\n7.AJAX (transport the JSON document handle returns collection to a restful service API service) Web Storefront: Billing Details and Handle Returns Web Pages\n\n8.AngularJS (call the restful services to handle send the JSON document collections: shopper, products, shopping cart,  shipping/billing and returns) Web Storefront: Billing Details and  Handle Returns Web Pages\n\n9.NodeJS (restful services to handle receive the JSON document collections: shopper, products, shopping cart, shipping/billing and returns) Web Storefront: Handle Returns Web Pages\n\nFor this you can utilize your own IDE or You can perform your group project on zybook. :https://learn.zybooks.com/zybook/PSUIST256SinghSpring2025/chapter/10/section/5 \n\nWe have create a special module in zybook by name  Module 10. Group Project where you will be performing the group project. You will be coding in group and zybook has been configured according to your groups.\n\nIn the lab you are provided with a coding place where you can edit and add files as per your requirement and run your websites.Post completion you can submit your project, you have multiple submission as we will be considering the most recent submission for grading post deadline",

    "Week 11: Group Work Project Alpha Node.JS, MongoDB Storefront": "All group members MUST contribute. If your name does not appear on the cover page or in the document section then you have not contributed and will receive a zero for this assignment. Breakup the development work for this assignment so that each group member is assigned a task. Each section of the PDF document will show the team member author who contributed to the following tasks. Include all the coding effort and screen shots of web page rendering in the Web browser.\n\n1.Connect the storefront NodeJS app to MongoDB database backend\n\n2.In MongoDB database create the collections for the storefront - shopper, products, shopping cart, shipping/billing and returns\n\nYou can use your own IDE to perform this task of can perform your group project on zybook: https://learn.zybooks.com/zybook/PSUIST256SinghSpring2025/chapter/10/section/6\n\nIn the lab you are provided with a coding place where you can edit and add files as per your requirement and run your websites.Post completion you can submit your project, you have multiple submission as we will be considering the most recent submission for grading post deadline",

    "Week 12: Group Work Project Alpha Assignment Angular, NodeJS , MongoDB, CRUD, Project Test Plan Storefront": "All group members MUST contribute. If your name does not appear on the cover page or in the document section then you have not contributed and will receive a zero for this assignment. Break up the development work for this assignment so that each group member is assigned a task. Each section of the PDF document will show the team member author who contributed to the following tasks. Include all the coding effort and screen shots of the web page rendering in the Web browser.\n\n1.Connect the NodeJS restful services APIs JSON document collections received: shopper, products, shopping cart, and returns) to the MongoDB collections\n\n2.Develop a test plan spreadsheet with test cases for the Storefront project\n\n3.Each test case should be testing the storefront functionality - shopper, products, shopping cart, and returns\n\n4.Test end-to-end and verify data integrity and connectivity with full CRUD Create, Read, Update and Delete for the shopper, products, shopping cart, and returns collections\n\n5.Include on the test plan the following: test id, test date, tester, area tested, testing actions performed, results pass or fail, comments, bug fixed on date\n\nYou can use your own IDE to perform your group project or on zybook use https://learn.zybooks.com/zybook/PSUIST256SinghSpring2025/chapter/10/section/7",

    "Week 13: Group Project Progress discussion": "Your group will present your group project’s progress for 3 minutes during this lecture and submit a short document summarizing your work. This is your chance to share what you’ve done and ask for help if needed. Email Professor Dhananjay for a one-on-one meeting if you’re facing challenges.\n\n1.Discussion Activity (30 Points)\n\nA brief idea of what to speak on:\n\nWhat your project is and its goal.\n\nWhat you’ve completed so far.\n\nAny issues or questions (optional).\n\nAll group members should contribute.\n\n2.Progress Document (20 points)\n\nSubmit a 1-page document (as a group)\n\nInclude:\n\nProject title and brief description (2–3 sentences).\n\nList of completed features or milestones (bullet points).\n\nOne challenge faced or question for the professor (optional)."
  }